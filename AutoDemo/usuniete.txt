(defrule determine-rotation-state ""

   (logical (engine-starts No))

   =>

   (assert (UI-state (display RotateQuestion)
                     (relation-asserted engine-rotates)
                     (response No)
                     (valid-answers No Yes))))
   
(defrule determine-sluggishness ""

   (logical (runs-normally No))

   =>

   (assert (UI-state (display SluggishQuestion)
                     (relation-asserted engine-sluggish)
                     (response No)
                     (valid-answers No Yes))))
   
(defrule determine-misfiring ""

   (logical (runs-normally No))

   =>

   (assert (UI-state (display MisfireQuestion)
                     (relation-asserted engine-misfires)
                     (response No)
                     (valid-answers No Yes))))

(defrule determine-knocking ""

   (logical (runs-normally No))

   =>

   (assert (UI-state (display KnockQuestion)
                     (relation-asserted engine-knocks)
                     (response No)
                     (valid-answers No Yes))))

(defrule determine-low-output ""

   (logical (runs-normally No))

   =>

   (assert (UI-state (display OutputQuestion)
                     (relation-asserted engine-output-low)
                     (response No)
                     (valid-answers No Yes))))

(defrule determine-gas-level ""

   (logical (engine-starts No)

            (engine-rotates Yes))

   =>

   (assert (UI-state (display GasQuestion)
                     (relation-asserted tank-has-gas)
                     (response No)
                     (valid-answers No Yes))))

(defrule determine-battery-state ""
  
   (logical (engine-rotates No))

   =>
   
   (assert (UI-state (display BatteryQuestion)
                     (relation-asserted battery-has-charge)
                     (response No)
                     (valid-answers No Yes))))

(defrule determine-point-surface-state ""

   (or (logical (engine-starts No)  
   
                (engine-rotates Yes))
                     
       (logical (engine-output-low Yes)))

   =>

   (assert (UI-state (display PointsQuestion)
                     (relation-asserted point-surface-state)
                     (response Normal)
                     (valid-answers Normal Burned Contaminated))))

(defrule determine-conductivity-test ""
   
   (logical (engine-starts No)  
   
            (engine-rotates No)
            
            (battery-has-charge Yes))

   =>

   (assert (UI-state (display CoilQuestion)
                     (relation-asserted conductivity-test-positive)
                     (response No)
                     (valid-answers No Yes))))


(defrule engine-misfires ""

   (logical (engine-misfires Yes))

   =>

   (assert (UI-state (display PointGapRepair)
                     (state final))))

(defrule engine-knocks ""

   (logical (engine-knocks Yes))

   =>

   (assert (UI-state (display AdjustTimingRepair)
                     (state final))))

(defrule tank-out-of-gas ""

   (logical (tank-has-gas No))

   =>

   (assert (UI-state (display AddGasRepair)
                     (state final))))
   
(defrule battery-dead ""

   (logical (battery-has-charge No))
   
   =>

   (assert (UI-state (display ReplaceBatteryRepair)
                     (state final))))
   
(defrule point-surface-state-burned ""

   (logical (point-surface-state Burned))

   =>

   (assert (UI-state (display ReplacePointsRepair)
                     (state final))))
                     
(defrule point-surface-state-contaminated ""
   
   (logical (point-surface-state Contaminated))
   
   =>

   (assert (UI-state (display CleanPointsRepair)
                     (state final))))

(defrule conductivity-test-positive-yes ""

   (logical (conductivity-test-positive Yes))
   
   =>

   (assert (UI-state (display LeadWireRepair)
                     (state final))))
                     
(defrule conductivity-test-positive-no ""

   (logical (conductivity-test-positive No))
      
   =>

   (assert (UI-state (display CoilRepair)
                     (state final))))
                     
(defrule no-repairs ""

   (declare (salience -10))
  
   (logical (UI-state (id ?id)))
   
   (state-list (current ?id))
     
   =>
  
   (assert (UI-state (display MechanicRepair)
                     (state final))))
                     